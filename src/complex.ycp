/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/sudo/complex.ycp
 * Package:	Configuration of sudo
 * Summary:	Dialogs definitions
 * Authors:	Bubli <kmachalkova@suse.cz>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z mzugec $
 */

{

textdomain "sudo";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "Sudo";
import "Report";
import "Address";
import "Netmask";


include "sudo/helps.ycp";

global string current_alias_name = "";
global integer current_spec_idx = -1;
global string initial_screen = "user_specs";

string AddHostDialog()  {
	string new_host = "";
	string netmask = "";

	UI::OpenDialog(`opt(`decorated), `VBox(
	`Frame(
		_("Add New Host to the Alias"),
		`TextEntry(`id("hostname"),_("Hostname or Network"),"")
	),
	`HBox(
	    `PushButton(`id(`ok), Label::OKButton()),
	    `HSpacing(1),
	    `PushButton(`id(`cancel), Label::CancelButton())
      )
	));

	any ret = nil;
	while (true) {
        ret = UI::UserInput();
		if (ret == `ok) {
			new_host = (string) UI::QueryWidget(`id("hostname"), `Value);

			if ( find(new_host,"/") != -1 ) {
				list <string> tmp = splitstring(new_host,"/");
				new_host = tmp[0]:"";
				netmask = tmp[1]:"";

				if( !Netmask::Check(netmask)){
					netmask = "";
					Popup::Error( _("A valid netmask is either in dotted quad notation 
							(4 integers in the range 128 - 255 separated by dots) 
							or single integer in the range 0 - 32" ) );
					UI::SetFocus(`id("hostname"));
					continue;
				}
				netmask = "/" + netmask;
			}
			if ( !Address::Check(new_host)) {
				Popup::Error( Address::Valid4() );
				UI::SetFocus(`id("hostname"));
				continue;
			}
			break;
	     } else if (ret == `cancel) {
			new_host = ("");
			break;
		}
    }
	UI::CloseDialog();
	return (new_host + netmask);
}

string AddCommandDialog() {
	string new_command = "";

	UI::OpenDialog(`opt(`decorated), `VBox(
		`Frame(
			_("Add new command with optional parameters"),
			`VBox(
				`HBox(
					`TextEntry(`id("cmd"),_("Command")),
					`VBox (
						`VSpacing(1.1),
						`PushButton(`id("browse_c"),_("Browse"))
					)
				),
				`TextEntry(`id("params"),_("Parameters (optional)"))
			)
		),
		`HBox(
			`PushButton(`id(`ok), Label::OKButton()),
			`HSpacing(1),
			`PushButton(`id(`cancel), Label::CancelButton())
		)
	));

	any ret = nil;
	while (true) {
        ret = UI::UserInput();
		if (ret == `ok) {
			string cmd = (string) UI::QueryWidget(`id("cmd"), `Value);
			string params = (string) UI::QueryWidget(`id("params"), `Value);
			new_command = cmd + " " + params;
			break;
	     } else if (ret == `cancel) {
			break;
		} else if (ret == "browse_c") {
			string new_cmd = UI::AskForExistingFile("/", "*", "Choose a command");
			UI::ChangeWidget(`id("cmd"),`Value, new_cmd);
		}

    }
	UI::CloseDialog();
	return new_command; 
}


/* Read settings dialog
     * @return `abort if aborted and `next otherwise
     */
    symbol ReadDialog() {
	Wizard::RestoreHelp(HELPS["read"]:"");
	boolean ret = Sudo::Read();
	return ret ? `next : `abort;
    }

    /**
     * Write settings dialog
     * @return `abort if aborted and `next otherwise
     */
    symbol WriteDialog() {
	Wizard::RestoreHelp(HELPS["write"]:"");
	boolean ret = Sudo::Write();
	return ret ? `next : `abort;
    }
}
