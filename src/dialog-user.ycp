{
textdomain "sudo";

import "Label";
import "Wizard";
import "Sudo";
import "Report";

include "sudo/complex.ycp";
include "sudo/helps.ycp";

any RedrawUserAlias(string name, list <string> members, list <string> users) {
	list <term> items = [];

	if (name != "") {
		UI::ChangeWidget(`id("user_alias_name"), `Value, name);
	}

	foreach(string it, members, {
		items = add(items, `item(`id(it),it));
	});
	UI::ChangeWidget(`id("user_alias_members"),`Items, items);

	UI::ReplaceWidget(`id("all_users_replace"),
		`ComboBox(`id("all_users"),_("Local and System Users"), sort(string s, string t, users, ``( s < t))));

}

any AddEditUserAliasDialog (string what) {
	string caption = "";
	list <string> alias_members = [];
	list <term> items = [];
	list <string> users = (list <string>) merge(Sudo::all_users, Sudo::GetAliasNames("user"));

	if (what == "Add") {
		caption = _("New User Alias");
	} else if (what == "Edit") {
		alias_members = Sudo::GetUserAliasMembers(current_alias_name);
		foreach(string member, alias_members, {
			users = filter(string user, users, ``(user != member));
		});
		caption = _("Existing User Alias");
	}

	term contents = `VBox (
		`TextEntry(`id("user_alias_name"),_("Alias Name")),
		`VSpacing(1),
		`HBox(
			`VBox(
				`opt(`hstretch),
				`Left(`ReplacePoint(`id("all_users_replace"),
					`ComboBox(`id("all_users"),_("Local and System Users"), [])
				)),
				`Table(`id("user_alias_members"), `opt(`hstretch,`vstretch), `header("Alias Members"),[])
			),
			`HSquash(
				`VBox (
					`VSpacing(1.1),
                        `PushButton ( `id ( "add_member" ), `opt ( `hstretch, `key_F3 ), " " + Label::AddButton() + " "),
                        `PushButton ( `id ( "remove_member" ), `opt ( `hstretch, `key_F5 ), " " + Label::RemoveButton() + " "),
                        `Empty(`opt(`vstretch))
                    )
               )

		)
	);

	Wizard::SetContentsButtons(caption, contents,HELPS["user_alias"]:"",Label::BackButton(), Label::OKButton());
	UI::ChangeWidget (`id("user_alias_name"), `ValidChars, "_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");

	RedrawUserAlias(current_alias_name, alias_members,users);

	any ret = nil;
	while(true) {

	    ret  = UI::UserInput();
	    /* abort? */
	    if(ret == `abort) {
	        if(Sudo::Abort()) break;
	        else continue;
	    /* next */
		}else if(ret == `next) {
			string new_alias = toupper ((string) UI::QueryWidget(`id("user_alias_name"),`Value));
			if (new_alias == "") {
				Popup::Error(_("Alias name must not be empty."));
				UI::SetFocus(`id("user_alias_name"));
				continue;
			}
			if (current_alias_name != new_alias) {
				if (Sudo::SearchUserAlias(new_alias) ) {
					Popup::Error(sformat(_("Alias with name %1 already exists"),new_alias));
					UI::SetFocus(`id("user_alias_name"));
					continue;
				}
				Sudo::RemoveUserAlias(current_alias_name);
			}
			if (alias_members == []) {
				Popup::Error(_("Alias must have at least one member."));
				UI::SetFocus(`id("user_alias_members"));
				continue;
			}

			Sudo::SetUserAliasMembers(new_alias,alias_members);
			Sudo::SetModified();
			break;
		/* back */
	     }else if(ret == `back) {
	        break;
		/* add users*/
		}else if(ret == "add_member"){
			string new_member = (string) UI::QueryWidget(`id("all_users"),`Value);

			alias_members = add(alias_members, new_member);
			users = filter(string s, users, ``(s != new_member));
			RedrawUserAlias("",alias_members, users);
		/* delete users */
		}else if (ret == "remove_member"){
			string current_item = (string) UI::QueryWidget(`id("user_alias_members"), `CurrentItem);
			alias_members = filter(string s, alias_members, ``(s != current_item));
			users = add(users, current_item);
			UI::ReplaceWidget(`id("all_users_replace"),
				`ComboBox(`id("all_users"),_("Local and System Users"),users));
			RedrawUserAlias("",alias_members, users);
	    /* unknown */
	    } else {
	        y2error("unexpected retcode: %1", ret);
	        continue;
	    }
	}

	initial_screen = "user_aliases";
	Wizard::RestoreNextButton();
	return ret;
}

any SaveUserAliases () {
	return `next;
}



}
